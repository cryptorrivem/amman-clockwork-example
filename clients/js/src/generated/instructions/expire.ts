/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category Expire
 * @category generated
 */
export const expireStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'ExpireInstructionArgs'
)
/**
 * Accounts required by the _expire_ instruction
 *
 * @property [_writable_] userStakedMint
 * @property [] mint
 * @category Instructions
 * @category Expire
 * @category generated
 */
export type ExpireInstructionAccounts = {
  userStakedMint: web3.PublicKey
  mint: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const expireInstructionDiscriminator = [
  243, 83, 205, 58, 57, 201, 247, 146,
]

/**
 * Creates a _Expire_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category Expire
 * @category generated
 */
export function createExpireInstruction(
  accounts: ExpireInstructionAccounts,
  programId = new web3.PublicKey('DSg74Tu4w2urxxmw7gdTz4GZUE4DCy2C7RrPr3mRgmuB')
) {
  const [data] = expireStruct.serialize({
    instructionDiscriminator: expireInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.userStakedMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
