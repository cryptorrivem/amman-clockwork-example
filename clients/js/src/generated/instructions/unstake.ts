/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category Unstake
 * @category generated
 */
export const unstakeStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'UnstakeInstructionArgs'
)
/**
 * Accounts required by the _unstake_ instruction
 *
 * @property [_writable_] userStakedMint
 * @property [_writable_, **signer**] owner
 * @property [_writable_] thread
 * @property [] threadAuthority
 * @property [] mint
 * @property [_writable_] token
 * @property [_writable_] tokenRecord
 * @property [_writable_] metadata
 * @property [] edition
 * @property [] authorizationRules
 * @property [] sysvarInstruction
 * @property [] mplTokenMetadataProgram
 * @property [] mplTokenAuthRulesProgram
 * @property [] threadProgram
 * @category Instructions
 * @category Unstake
 * @category generated
 */
export type UnstakeInstructionAccounts = {
  userStakedMint: web3.PublicKey
  owner: web3.PublicKey
  thread: web3.PublicKey
  threadAuthority: web3.PublicKey
  mint: web3.PublicKey
  token: web3.PublicKey
  tokenRecord: web3.PublicKey
  metadata: web3.PublicKey
  edition: web3.PublicKey
  authorizationRules: web3.PublicKey
  systemProgram?: web3.PublicKey
  sysvarInstruction: web3.PublicKey
  tokenProgram?: web3.PublicKey
  mplTokenMetadataProgram: web3.PublicKey
  mplTokenAuthRulesProgram: web3.PublicKey
  threadProgram: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const unstakeInstructionDiscriminator = [
  90, 95, 107, 42, 205, 124, 50, 225,
]

/**
 * Creates a _Unstake_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category Unstake
 * @category generated
 */
export function createUnstakeInstruction(
  accounts: UnstakeInstructionAccounts,
  programId = new web3.PublicKey('DSg74Tu4w2urxxmw7gdTz4GZUE4DCy2C7RrPr3mRgmuB')
) {
  const [data] = unstakeStruct.serialize({
    instructionDiscriminator: unstakeInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.userStakedMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.owner,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.thread,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.threadAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.token,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenRecord,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.metadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.edition,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authorizationRules,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.sysvarInstruction,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.mplTokenMetadataProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.mplTokenAuthRulesProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.threadProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
