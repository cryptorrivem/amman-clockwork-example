/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { PoolSettings, poolSettingsBeet } from '../types/PoolSettings'

/**
 * @category Instructions
 * @category PoolUpdate
 * @category generated
 */
export type PoolUpdateInstructionArgs = {
  settings: PoolSettings
}
/**
 * @category Instructions
 * @category PoolUpdate
 * @category generated
 */
export const poolUpdateStruct = new beet.BeetArgsStruct<
  PoolUpdateInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['settings', poolSettingsBeet],
  ],
  'PoolUpdateInstructionArgs'
)
/**
 * Accounts required by the _poolUpdate_ instruction
 *
 * @property [**signer**] admin
 * @property [] config
 * @property [_writable_, **signer**] payer
 * @property [_writable_] pool
 * @category Instructions
 * @category PoolUpdate
 * @category generated
 */
export type PoolUpdateInstructionAccounts = {
  admin: web3.PublicKey
  config: web3.PublicKey
  payer: web3.PublicKey
  pool: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const poolUpdateInstructionDiscriminator = [
  8, 105, 232, 226, 12, 72, 73, 233,
]

/**
 * Creates a _PoolUpdate_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category PoolUpdate
 * @category generated
 */
export function createPoolUpdateInstruction(
  accounts: PoolUpdateInstructionAccounts,
  args: PoolUpdateInstructionArgs,
  programId = new web3.PublicKey('F8dKseqmBoAkHx3c58Lmb9TgJv5qeTf3BbtZZSEzYvUa')
) {
  const [data] = poolUpdateStruct.serialize({
    instructionDiscriminator: poolUpdateInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.admin,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.config,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.pool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
